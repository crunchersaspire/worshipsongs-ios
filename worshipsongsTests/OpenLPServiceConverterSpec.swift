//
// Author: James Selvakumar
// Since: 3.0.0
// Copyright Â© 2021 mCruncher. All rights reserved.
// 

import Foundation
import Quick
import Nimble
import SwiftyJSON
import AEXML
@testable import worshipsongs

class OpenLPServiceConverterSpec : QuickSpec {
    override func spec() {
        describe("OpenLPServiceConverter") {
            let openLPServiceConverter = OpenLPServiceConverter()
            let databaseHelper = DatabaseHelper()
            var favouriteList: [FavoritesSongsWithOrder]!
            var song1: Songs!
            var song2: Songs!
            var expectedJson: JSON!
            var result: JSON!
            
            beforeEach {
                song1 = databaseHelper.findSongs(byTitle: "Amazing Grace")[0]
                song2 = databaseHelper.findSongs(byTitle: "God is good")[0]
            }
            
            describe("Convert favourite list to OpenLP Service Lite JSON format") {
                context("given a favourite list exist with some songs") {
                    beforeEach {
                        let favouriteSong1 = FavoritesSongsWithOrder(orderNo: 1, songName: song1.title, songListName: "foo")
                        let favouriteSong2 = FavoritesSongsWithOrder(orderNo: 2, songName: song2.title, songListName: "foo")
                        favouriteList = [favouriteSong1, favouriteSong2]
                    }
                    
                    context("and a oszl (OpenLP Service Lite) json generated by OpenLP exists for the same songs in the same order") {
                        beforeEach {
                            let bundle = Bundle(for: type(of: self))
                            let path = bundle.path(forResource: "openlp-service-lite", ofType: "osj")!
                            let jsonData = NSData(contentsOfFile: path)!
                            //let jsonString = String(data: jsonData as Data, encoding: .utf8)
                            expectedJson = try! JSON(data: jsonData as Data)
                            print("Expected Json:\n \(expectedJson)")
                        }
                        
                        context("when converting the favourite list to oszl json format") {
                            beforeEach {
                                result = openLPServiceConverter.toOszlJson(favouriteList: favouriteList!)
                            }
                            
                            it("should have a top level array with three elements") {
                                expect(result.count).to(equal(expectedJson.count))
                            }
                            
                            it("should have general service info as the first element of the array") {
                                let generalServiceInfo = result[0]
                                let openlpCore = generalServiceInfo["openlp_core"]
                                
                                expect(openlpCore["lite_service"].bool).to(beTrue())
                                expect(openlpCore["service_theme"]).to(beEmpty())
                            }
                            
                            it("should have the following service header for the first song") {
                                let expectedSongTitle = "Amazing Grace (my chains are gone)"
                                let expectedAuthor = "John Newton"
                                
                                let serviceItem = result[1]["serviceitem"]
                                let serviceItemHeader = serviceItem["header"]
                                
                                print("No. of elements in service item header: \(serviceItemHeader.count)")
                                expect(serviceItemHeader.count).to(equal(expectedJson[1]["serviceitem"]["header"].count))
                                
                                expect(serviceItemHeader["name"]).to(equal("songs"))
                                expect(serviceItemHeader["plugin"]).to(equal("songs"))
                                expect(serviceItemHeader["theme"].null).to(beAnInstanceOf(NSNull.self))
                                expect(serviceItemHeader["title"].string).to(equal(expectedSongTitle))
                                
                                let footer = serviceItemHeader["footer"]
                                expect(footer.count).to(equal(2))
                                expect(footer[0].string).to(equal(expectedSongTitle))
                                expect(footer[1].string).to(equal("Written by: \(expectedAuthor)"))
                                
                                expect(serviceItemHeader["type"]).to(equal(1))
                                expect(serviceItemHeader["icon"]).to(equal(":/plugins/plugin_songs.png"))

                                let audit = serviceItemHeader["audit"]
                                expect(audit.count).to(equal(4))
                                expect(audit[0].string).to(equal(expectedSongTitle))
                                expect(audit[1]).to(equal(["\(expectedAuthor)"]))
                                expect(audit[2]).to(equal(""))
                                expect(audit[3]).to(equal(""))
                                
                                expect(serviceItemHeader["notes"]).to(equal(""))
                                expect(serviceItemHeader["from_plugin"].bool).to(beFalse())
                                expect(serviceItemHeader["capabilities"]).to(equal([2, 1, 5, 8, 9, 13]))
                                expect(serviceItemHeader["search"]).to(equal(""))
                                
                                let data = serviceItemHeader["data"]
                                let expectedDataTitle = "amazing grace my chains are gone@unending love amazing grace"
                                expect(data.count).to(equal(2))
                                expect(data["title"].string).to(equal(expectedDataTitle))
                                expect(data["authors"].string).to(equal(expectedAuthor))
                                
                                let expectedXmlVersion = expectedJson[1]["serviceitem"]["header"]["xml_version"].string
                                //expect(serviceItemHeader["xml_version"].string).to(equal(expectedXmlVersion))
                                
                                expect(serviceItemHeader["auto_play_slides_once"].bool).to(beFalse())
                                expect(serviceItemHeader["auto_play_slides_loop"].bool).to(beFalse())
                                expect(serviceItemHeader["timed_slide_interval"]).to(equal(0))
                                expect(serviceItemHeader["start_time"]).to(equal(0))
                                expect(serviceItemHeader["end_time"]).to(equal(0))
                                expect(serviceItemHeader["media_length"]).to(equal(0))
                                expect(serviceItemHeader["background_audio"]).to(equal([]))
                                expect(serviceItemHeader["theme_overwritten"].bool).to(beFalse())
                                expect(serviceItemHeader["will_auto_start"].bool).to(beFalse())
                                expect(serviceItemHeader["processor"].null).to(beAnInstanceOf(NSNull.self))
                            }
                            
                            it("should have the following service header for the second song") {
                                let expectedSongTitle = "God Is Good All The Time"
                                let expectedAuthor1 = "Don Moen"
                                let expectedAuthor2 = "Paul Overstreet"
                                
                                let serviceItem = result[2]["serviceitem"]
                                let serviceItemHeader = serviceItem["header"]
                                
                                print("No. of elements in service item header: \(serviceItemHeader.count)")
                                expect(serviceItemHeader.count).to(equal(expectedJson[1]["serviceitem"]["header"].count))
                                
                                expect(serviceItemHeader["name"]).to(equal("songs"))
                                expect(serviceItemHeader["plugin"]).to(equal("songs"))
                                expect(serviceItemHeader["theme"].null).to(beAnInstanceOf(NSNull.self))
                                expect(serviceItemHeader["title"].string).to(equal(expectedSongTitle))
                                
                                let footer = serviceItemHeader["footer"]
                                expect(footer.count).to(equal(2))
                                expect(footer[0].string).to(equal(expectedSongTitle))
                                expect(footer[1].string).to(equal("Written by: \(expectedAuthor1) and \(expectedAuthor2)"))
                                
                                expect(serviceItemHeader["type"]).to(equal(1))
                                expect(serviceItemHeader["icon"]).to(equal(":/plugins/plugin_songs.png"))

                                let audit = serviceItemHeader["audit"]
                                expect(audit.count).to(equal(4))
                                expect(audit[0].string).to(equal(expectedSongTitle))
                                expect(audit[1]).to(equal([expectedAuthor1, expectedAuthor2]))
                                expect(audit[2]).to(equal(""))
                                expect(audit[3]).to(equal(""))
                                
                                expect(serviceItemHeader["notes"]).to(equal(""))
                                expect(serviceItemHeader["from_plugin"].bool).to(beFalse())
                                expect(serviceItemHeader["capabilities"]).to(equal([2, 1, 5, 8, 9, 13]))
                                expect(serviceItemHeader["search"]).to(equal(""))
                                
                                let data = serviceItemHeader["data"]
                                let expectedDataTitle = "god is good all the time@god is good all the time"
                                expect(data.count).to(equal(2))
                                expect(data["title"].string).to(equal(expectedDataTitle))
                                expect(data["authors"].string).to(equal("Don Moen, Paul Overstreet"))
                                
//                                expect(serviceItemHeader["xml_version"].string).to(equal())
                                
                                expect(serviceItemHeader["auto_play_slides_once"].bool).to(beFalse())
                                expect(serviceItemHeader["auto_play_slides_loop"].bool).to(beFalse())
                                expect(serviceItemHeader["timed_slide_interval"]).to(equal(0))
                                expect(serviceItemHeader["start_time"]).to(equal(0))
                                expect(serviceItemHeader["end_time"]).to(equal(0))
                                expect(serviceItemHeader["media_length"]).to(equal(0))
                                expect(serviceItemHeader["background_audio"]).to(equal([]))
                                expect(serviceItemHeader["theme_overwritten"].bool).to(beFalse())
                                expect(serviceItemHeader["will_auto_start"].bool).to(beFalse())
                                expect(serviceItemHeader["processor"].null).to(beAnInstanceOf(NSNull.self))
                            }

                        }
                    }
                }
            }
            
            describe("Get footer authors") {
                it("should be in the expected format") {
                    expect(openLPServiceConverter.getFooterAuthors(["foo"])).to(equal("Written by: foo"))
                    expect(openLPServiceConverter.getFooterAuthors(["foo", "bar"])).to(equal("Written by: foo and bar"))
                    expect(openLPServiceConverter.getFooterAuthors(["foo", "bar", "foobar"])).to(equal("Written by: foo, bar and foobar"))
                }
            }
            
            describe("Get xml version of song") {
                var result: AEXMLDocument!
                
                beforeEach {
                    result = openLPServiceConverter.getXmlVersion(forSong: song1, withAuthors: databaseHelper.findAuthors(bySongId: song1.id))
                    print(result.xml)
                }
                                
                it("should have the required attributes in the 'song' element") {
                    let attributes = result.root.attributes
                    
                    expect(attributes["xmlns"]).to(equal("http://openlyrics.info/namespace/2009/song"))
                    expect(attributes["version"]).to(equal("0.8"))
                    expect(attributes["createdIn"]).to(equal("OpenLP 2.4.6"))
                    expect(attributes["modifiedIn"]).to(equal("OpenLP 2.4.6"))
//                    expect(attributes["modifiedDate"]).to(equal("2021-01-01T09:00:00"))
                }
                
                it("should have a properties element with respective child elements") {
                    let properties = result.root["properties"]
                    
                    let titles = properties["titles"]
                    expect(titles.children[0].value).to(equal("Amazing Grace (my chains are gone)"))
                    expect(titles.children[1].value).to(equal("unending love, amazing grace"))
                    expect(titles.children.count).to(equal(2))
                    
                    expect(properties["verseOrder"].value).to(equal("v1 v2 c1 c2 v3 c1 c2 b1"))
                    
                    let authors = properties["authors"]
                    expect(authors.children[0].value).to(equal("John Newton"))
                    expect(authors.children.count).to(equal(1))
                    
                    let themes = properties["themes"]
                    expect(themes.children[0].value).to(equal("English {à®à®à¯à®à®¿à®²à®®à¯}"))
                    expect(themes.children.count).to(equal(1))
                    
                    expect(properties.children.count).to(equal(4))
                }
                
                it("should have a lyrics element with respective child elements") {
                    let lyrics = result.root["lyrics"]
                    print(song1.lyrics)
                    
                    let expectedVerse1Lines = "Amazing Grace! how sweet the sound<br/>That saved a wretch like me;<br/>I once was lost, but now am found,<br/>Was blind, but now I see."
                    expect(lyrics.children[0].attributes["name"]).to(equal("v1"))
                    expect(lyrics.children[0]["lines"].value).to(equal(expectedVerse1Lines))
                    
                    let expectedVerse2Lines = "'Twas grace that taught my heart to fear<br/>And grace my fears relieved<br/>How precious did that grace appear<br/>The hour I first believed"
                    expect(lyrics.children[1].attributes["name"]).to(equal("v2"))
                    expect(lyrics.children[1]["lines"].value).to(equal(expectedVerse2Lines))

                    let expectedChorus1Lines = "My chains are gone <br/>I've been set free<br/>My God my Saviour<br/>Has ransomed me"
                    expect(lyrics.children[2].attributes["name"]).to(equal("c1"))
                    expect(lyrics.children[2]["lines"].value).to(equal(expectedChorus1Lines))

                    let expectedChorus2Lines = "And like a flood His mercy reigns<br/>Unending love amazing grace"
                    expect(lyrics.children[3].attributes["name"]).to(equal("c2"))
                    expect(lyrics.children[3]["lines"].value).to(equal(expectedChorus2Lines))

                    let expectedVerse3Lines = "The Lord has promised good to me<br/>His word my hope secures<br/>He will my shield and portion be<br/>As long as life endures"
                    expect(lyrics.children[4].attributes["name"]).to(equal("v3"))
                    expect(lyrics.children[4]["lines"].value).to(equal(expectedVerse3Lines))

                    let expectedBridge1Lines = "The earth shall soon dissolve like snow<br/>The sun forbear to shine<br/>But God, Who called me here below<br/>Will be forever mine<br/>Will be forever mine<br/>You are forever mine"
                    expect(lyrics.children[5].attributes["name"]).to(equal("b1"))
                    expect(lyrics.children[5]["lines"].value).to(equal(expectedBridge1Lines))

                    expect(lyrics.children.count).to(equal(6))
                }
            }
        }
    }
}
